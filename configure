#!/bin/bash
set -e

# --- DEBUG MODE ---
DEBUG() { echo "[DEBUG] $@"; }

DEBUG "Starting configure script..."
DEBUG "Current working directory: $(pwd)"
DEBUG "User: $(whoami)"
DEBUG "Home directory: $HOME"

# Determine current working directory
CURRENT_DIR=$(pwd)
DEBUG "CURRENT_DIR set to: $CURRENT_DIR"

# Detect OS
detect_osversion() {
    local osversion="unsupported"
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DEBUG "Detected ID=$ID, VERSION_CODENAME=$VERSION_CODENAME, VERSION_ID=$VERSION_ID"
        case "$ID" in
            ubuntu)
                case "$VERSION_CODENAME" in
                    bionic) osversion="ubuntu/bionic";;
                    focal) osversion="ubuntu/focal";;
                    jammy) osversion="ubuntu/focal";;
                    noble) osversion="ubuntu/focal";;
                esac
                ;;
            centos)
                case "$VERSION_ID" in
                    7) osversion="centos/7";;
                esac
                ;;
        esac
    fi
    echo "$osversion"
}

# --- Safe file copy + substitution ---
copy_files() {
    local source_dir="$1"
    local target_dir="$2"
    DEBUG "Entering copy_files with source=$source_dir target=$target_dir"

    local same_dir=0
    if [ "$(realpath "$source_dir")" == "$(realpath "$target_dir")" ]; then
        same_dir=1
    fi

    # Hardened escape helper
    esc() {
        printf '%s' "$1" | sed -e ':a' -e 'N' -e '$!ba' \
            -e 's/[\/|&]/\\&/g' \
            -e 's/\n/ /g'
    }

    copy_and_update() {
        local src_pattern="$1"
        local dest_dir="$2"
        DEBUG "copy_and_update pattern=$src_pattern dest=$dest_dir"

        for file in $src_pattern; do
            if [ -f "$file" ]; then
                DEBUG "Processing file: $file"
                if [[ "$file" == *.in ]]; then
                    filename=$(basename -- "$file")
                    filename_no_ext="${filename%.in}"
                    dest_file="$dest_dir/$filename_no_ext"
                    mkdir -p "$dest_dir"

                    SRC_DIR_ESC=$(esc "$SOURCE_DIR")
                    TOOLDIR_ESC=$(esc "$TOOLDIR")
                    OSVERSION_ESC=$(esc "$OSVERSION")
                    PREFIX_ESC=$(esc "$PREFIX")
                    CURRDIR_ESC=$(esc "$CURRENT_DIR")

                    DEBUG "Escaped vars: SRC=$SRC_DIR_ESC TOOL=$TOOLDIR_ESC PREFIX=$PREFIX_ESC CURR=$CURRDIR_ESC"

                    if ! sed "s|@VORTEX_HOME@|$SRC_DIR_ESC|g;
                              s|@XLEN@|$XLEN|g;
                              s|@TOOLDIR@|$TOOLDIR_ESC|g;
                              s|@OSVERSION@|$OSVERSION_ESC|g;
                              s|@INSTALLDIR@|$PREFIX_ESC|g;
                              s|@BUILDDIR@|$CURRDIR_ESC|g" "$file" > "$dest_file"; then
                        echo "[ERROR] sed substitution failed for $file"
                        echo "SRC_DIR_ESC=$SRC_DIR_ESC"
                        echo "TOOLDIR_ESC=$TOOLDIR_ESC"
                        echo "PREFIX_ESC=$PREFIX_ESC"
                        echo "CURRDIR_ESC=$CURRDIR_ESC"
                        exit 1
                    fi

                    DEBUG "Generated: $dest_file"

                    read -r firstline < "$dest_file"
                    if [[ "$firstline" =~ ^#!.*bash ]]; then
                        chmod +x "$dest_file"
                        DEBUG "Marked $dest_file as executable"
                    fi
                else
                    if [ $same_dir -eq 0 ]; then
                        mkdir -p "$dest_dir"
                        cp -p "$file" "$dest_dir"
                        DEBUG "Copied $file -> $dest_dir"
                    fi
                fi
            fi
        done
    }

    for pattern in "${SUBDIRS[@]}"; do
        local full_copy=0
        if [[ "$pattern" == !* ]]; then
            full_copy=1
            pattern=${pattern:1}
        fi
        local source_pattern="$source_dir/$pattern"
        [ "$pattern" == "." ] && source_pattern=$source_dir

        DEBUG "Scanning for: $source_pattern"
        find "$source_dir" -type d -path "$source_pattern" 2>/dev/null | while read dir; do
            local rel_path="${dir#$source_dir}"
            rel_path="${rel_path#/}"
            local full_target_dir="$target_dir/$rel_path"
            DEBUG "Dir: $dir -> $full_target_dir"

            if [ $full_copy -eq 1 ]; then
                DEBUG "Full copy mode"
                copy_and_update "$dir/*" "$full_target_dir"
            else
                DEBUG "Partial copy mode"
                copy_and_update "$dir/Makefile" "$full_target_dir"
                copy_and_update "$dir/common.mk" "$full_target_dir"
                copy_and_update "$dir/*.in" "$full_target_dir"
            fi
        done
    done
}

# --- Defaults ---
default_xlen=32
default_tooldir=$HOME/tools
default_osversion=$(detect_osversion)
default_prefix=$CURRENT_DIR
DEBUG "Defaults: xlen=$default_xlen tool=$default_tooldir os=$default_osversion prefix=$default_prefix"

# Load config.mk defaults
if [ -f "config.mk" ]; then
    DEBUG "Loading defaults from config.mk"
    while IFS='=' read -r key value; do
        value=${value//[@]/}
        value="${value#"${value%%[![:space:]]*}"}"
        value="${value%"${value##*[![:space:]]}"}"
        case $key in
            XLEN\ ?*) default_xlen=${value//\?=/} ;;
            TOOLDIR\ ?*) default_tooldir=${value//\?=/} ;;
            OSVERSION\ ?*) default_osversion=${value//\?=/} ;;
            PREFIX\ ?*) default_prefix=${value//\?=/} ;;
        esac
    done < config.mk
fi

XLEN=${XLEN:=$default_xlen}
TOOLDIR=${TOOLDIR:=$default_tooldir}
OSVERSION=${OSVERSION:=$default_osversion}
PREFIX=${PREFIX:=$default_prefix}

DEBUG "Final config: XLEN=$XLEN TOOLDIR=$TOOLDIR OSVERSION=$OSVERSION PREFIX=$PREFIX"

# Parse CLI args
usage() {
    echo "Usage: $0 [--xlen=<val>] [--tooldir=<path>] [--osversion=<ver>] [--prefix=<path>]"
    exit 1
}
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --xlen=*) XLEN="${1#*=}" ;;
        --tooldir=*) TOOLDIR="${1#*=}" ;;
        --osversion=*) OSVERSION="${1#*=}" ;;
        --prefix=*) PREFIX="${1#*=}" ;;
        -h|--help) usage ;;
        *) echo "Unknown parameter: $1"; usage ;;
    esac
    shift
done

if [ "$OSVERSION" == "unsupported" ]; then
    echo "Error: Unsupported OS."
    exit 1
fi

SUBDIRS=("." "!ci" "!perf" "hw*" "kernel*" "runtime*" "sim*" "tests*")

SOURCE_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
THIRD_PARTY_DIR=$SOURCE_DIR/third_party
DEBUG "SOURCE_DIR=$SOURCE_DIR"
DEBUG "THIRD_PARTY_DIR=$THIRD_PARTY_DIR"

DEBUG "Beginning recursive copy..."
copy_files "$SOURCE_DIR" "$CURRENT_DIR"

DEBUG "âœ… Configuration complete. Files populated under $CURRENT_DIR"
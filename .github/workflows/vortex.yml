name: Apptainer CI

on: [push, pull_request]

jobs:
  apptainer-build:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        xlen: [32]
    runs-on: ${{ matrix.os }}

    env:
      APPTAINER_VERSION: "1.4.3"
      APPTAINER_BASE_CMD: --bind ${{ github.workspace }}:${{ github.workspace }} --pwd ${{ github.workspace }}
      TOOLDIR: ${{ github.workspace }}/tools

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # cache .sif using apptainer version, vm os, .def file, and its dependencies
      - name: Check .sif Cache
        id: cache-sif
        uses: actions/cache@v4
        with:
          path: miscs/apptainer/vortex.sif
          key: vortex-sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('miscs/apptainer/vortex.def', 'miscs/apptainer/install_boost_openssl.sh', 'miscs/apptainer/*.deb') }}
          restore-keys: |
            sif-${{ matrix.os }}-

      - name: Install Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: ${{ env.APPTAINER_VERSION }}

      # def file has dependencies on files (*.deb and .sh) in its local directory so we need to pushd / popd during build
      - name: Build container (if no cache hit)
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        run: |
          rm -f miscs/apptainer/vortex.sif
          pushd miscs/apptainer
          apptainer build vortex.sif vortex.def
          popd

      - name: Save .sif image to cache
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: miscs/apptainer/vortex.sif
          key: vortex-sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('miscs/apptainer/vortex.def', 'miscs/apptainer/install_boost_openssl.sh', 'miscs/apptainer/*.deb') }}

      - name: Upload .sif as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sif-${{ matrix.os }}
          path: miscs/apptainer/vortex.sif

      - name: Restore toolchain cache
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}
          restore-keys: |
            toolchain-${{ matrix.os }}-

      - name: Restore third_party cache
        id: cache-thirdparty
        uses: actions/cache@v4
        with:
          path: third_party
          key: ${{ matrix.os }}-thirdparty-v0.1
          restore-keys: |
            ${{ matrix.os }}-thirdparty-

      - name: Setup Toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: building toolchain..."
          TOOLDIR=$PWD/tools
          mkdir -p build
          cd build
          ../configure --tooldir=$TOOLDIR
          ci/toolchain_install.sh --all

      - name: Build Third Party
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        run: |
          make -C third_party > /dev/null

      - name: Save updated toolchain cache
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}

      - name: Save updated third_party cache
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: third_party
          key: ${{ matrix.os }}-thirdparty-v0.1

      - name: Ensure bind paths exist inside conatiner
        run: |
          mkdir -p "${{ github.workspace }}/tools"
          mkdir -p "${{ github.workspace }}/third_party"
      
      - name: Run Build inside container
        run: |
          apptainer exec $APPTAINER_BASE_CMD \
            --bind ${{ github.workspace }}:${{ github.workspace }} \
            --bind ${{ github.workspace }}/tools:/tools \
            --bind ${{ github.workspace }}/third_party:${{ github.workspace }}/third_party \
            --pwd ${{ github.workspace }} \
            --env TOOLDIR=/tools \
            miscs/apptainer/vortex.sif bash <<'EOF'
              set -e
              echo "--- Inside container ---"
              echo "PWD before setting TOOLDIR: $PWD"
              echo "TOOLDIR set to: $TOOLDIR"

              echo "Outer configure"
              ./configure --tooldir=$TOOLDIR --xlen=32

              mkdir -p build32
              cd build32
              echo "PWD after cd: $PWD"

              ../configure --tooldir=$TOOLDIR --xlen=32

              echo "Listing current directory:"
              ls -al ./
              echo "Listing parent directory:"
              ls -al ../
              echo "Contents of ../ci:"
              ls -al ../ci

              echo "Current TOOLDIR"
              echo $TOOLDIR

              echo "Contents of TOOLDIR"
              ls $TOOLDIR || true

              echo "--- Sourcing toolchain_env.sh ---"
              cat ../ci/toolchain_env.sh
              source ../ci/toolchain_env.sh

              echo "--- Starting build ---"
              make software -s
              make tests -s

              echo "check if we had a productive build"
              ls -al ${{ github.workspace }}/build${{ matrix.xlen }}/tests/regression/dogfood
          EOF

  complete:
    runs-on: ubuntu-22.04
    needs: [apptainer-build]
    steps:
      - name: Check Completion
        run: echo "âœ… All matrix jobs passed successfully."
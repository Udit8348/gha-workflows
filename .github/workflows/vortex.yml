name: Apptainer CI Pipeline (Slim per OS)

on:
  # can ignore unless debugging
  workflow_dispatch:
    inputs:
      build_from_scratch:
        description: "Build new .sif from .def?"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  # ============================================================
  # 1️⃣ CONTAINER BUILD STAGE
  # Builds one .sif per OS version and caches it
  # ============================================================
  container-build:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    runs-on: ${{ matrix.os }}

    env:
      APPTAINER_VERSION: "1.4.3"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore cached .sif image
        id: cache-sif
        uses: actions/cache@v4
        with:
          path: demo.sif
          key: sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('container.def', 'install_boost_openssl.sh', '*.deb') }}
          restore-keys: |
            sif-${{ matrix.os }}-

      - name: Install Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: ${{ env.APPTAINER_VERSION }}

      - name: Build container (if no cache hit)
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        run: |
          echo "Cache miss — rebuilding demo.sif..."
          rm -f demo.sif
          apptainer build demo.sif container.def

      - name: Save .sif image to cache
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: demo.sif
          key: sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('container.def', 'install_boost_openssl.sh', '*.deb') }}

      - name: Upload .sif as artifact (for dependent jobs)
        uses: actions/upload-artifact@v4
        with:
          name: apptainer-image-${{ matrix.os }}
          path: demo.sif

  # ============================================================
  # 2️⃣ SETUP STAGE
  # Prepares toolchain and third_party with per-OS caches
  # ============================================================
  setup:
    needs: container-build
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore toolchain cache
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}
          restore-keys: |
            toolchain-${{ matrix.os }}-

      - name: Restore third_party cache
        id: cache-thirdparty
        uses: actions/cache@v4
        with:
          path: third_party
          key: thirdparty-${{ matrix.os }}-${{ hashFiles('third_party/**', '.git/modules/third_party/HEAD') }}
          restore-keys: |
            thirdparty-${{ matrix.os }}-

      - name: Setup Toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: building toolchain..."
          TOOLDIR=$PWD/tools
          mkdir -p build
          cd build
          ../configure --tooldir=$TOOLDIR
          ci/toolchain_install.sh --all

      - name: Build Third Party
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: rebuilding third_party..."
          git submodule update --init --recursive third_party
          make -C third_party clean || true
          make -C third_party -j$(nproc)

      - name: Save updated toolchain cache
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}

      - name: Save updated third_party cache
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: third_party
          key: thirdparty-${{ matrix.os }}-${{ hashFiles('third_party/**', '.git/modules/third_party/HEAD') }}

  # ============================================================
  # 3️⃣ BUILD STAGE
  # Reuses the per-OS .sif container from artifacts
  # ============================================================
  build:
    needs: [container-build, setup]
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        xlen: [32, 64]
    runs-on: ${{ matrix.os }}

    env:
      GITHUB_WORKSPACE: ${{ github.workspace }}
      APPTAINER_BASE_CMD: >
        apptainer exec --cleanenv
        --bind ${{ github.workspace }}:${{ github.workspace }}
        --pwd ${{ github.workspace }}
        demo.sif

    steps:
      - uses: actions/checkout@v4

      - name: Download .sif image
        uses: actions/download-artifact@v4
        with:
          name: apptainer-image-${{ matrix.os }}
          path: .

      - name: Restore caches
        uses: actions/cache/restore@v4
        with:
          path: |
            tools
            third_party
          key: cache-${{ matrix.os }}

      - name: Run Build inside container
        run: |
          $APPTAINER_BASE_CMD bash -c "
            set -e
            TOOLDIR=\$PWD/tools
            mkdir -p build${{ matrix.xlen }}
            cd build${{ matrix.xlen }}
            ../configure --tooldir=\$TOOLDIR --xlen=${{ matrix.xlen }}
            source ../ci/toolchain_env.sh
            make software -s
            make tests -s
          "

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.xlen }}
          path: build${{ matrix.xlen }}

  # ============================================================
  # 4️⃣ TEST STAGE
  # Runs tests inside the cached container
  # ============================================================
  tests:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        name: [regression, opencl, cache, config1, config2, debug, scope, stress, synthesis, vm, vector, cupbop, tensor]
        xlen: [32, 64]
    runs-on: ${{ matrix.os }}

    env:
      GITHUB_WORKSPACE: ${{ github.workspace }}
      APPTAINER_BASE_CMD: >
        apptainer exec --cleanenv
        --bind ${{ github.workspace }}:${{ github.workspace }}
        --pwd ${{ github.workspace }}
        demo.sif

    steps:
      - uses: actions/checkout@v4

      - name: Download .sif image
        uses: actions/download-artifact@v4
        with:
          name: apptainer-image-${{ matrix.os }}
          path: .

      - name: Restore caches
        uses: actions/cache/restore@v4
        with:
          path: |
            tools
            third_party
          key: cache-${{ matrix.os }}

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.xlen }}
          path: build${{ matrix.xlen }}

      - name: Run Tests inside container
        run: |
          $APPTAINER_BASE_CMD bash -c "
            set -e
            cd build${{ matrix.xlen }}
            source ../ci/toolchain_env.sh
            chmod -R +x .
            if [ '${{ matrix.name }}' = 'regression' ]; then
              ./ci/regression.sh --unittest
              ./ci/regression.sh --isa
              ./ci/regression.sh --kernel
              ./ci/regression.sh --regression
            else
              ./ci/regression.sh --${{ matrix.name }}
            fi
          "

  # ============================================================
  # 5️⃣ COMPLETION STAGE
  # ============================================================
  complete:
    runs-on: ubuntu-22.04
    needs: tests
    steps:
      - name: Check Completion
        run: echo "✅ All matrix jobs passed successfully."
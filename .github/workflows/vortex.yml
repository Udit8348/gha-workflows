name: Apptainer CI

on: [push, pull_request]

jobs:
  apptainer-build:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        xlen: [32]
    runs-on: ${{ matrix.os }}

    env:
      GITHUB_WORKSPACE: ${{ github.workspace }}
      APPTAINER_VERSION: "1.4.3"
      APPTAINER_BASE_CMD: apptainer exec --bind ${{ github.workspace }}:${{ github.workspace }} --pwd ${{ github.workspace }}
      TOOLDIR: ${{ github.workspace }}/tools

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore cached .sif image
        id: cache-sif
        uses: actions/cache@v4
        with:
          path: demo.sif
          key: sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('container.def', 'install_boost_openssl.sh', '*.deb') }}
          restore-keys: |
            sif-${{ matrix.os }}-

      - name: Install Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: ${{ env.APPTAINER_VERSION }}

      - name: Build container (if no cache hit)
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        run: |
          echo "Cache miss — rebuilding demo.sif..."
          rm -f demo.sif
          apptainer build demo.sif container.def

      - name: Save .sif image to cache
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: demo.sif
          key: sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('container.def', 'install_boost_openssl.sh', '*.deb') }}

      # - name: Upload .sif as artifact (for dependent jobs)
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: apptainer-image-${{ matrix.os }}
      #     path: demo.sif

      - name: Restore toolchain cache
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}
          restore-keys: |
            toolchain-${{ matrix.os }}-

      - name: Restore third_party cache
        id: cache-thirdparty
        uses: actions/cache@v4
        with:
          path: third_party
          key: ${{ matrix.os }}-thirdparty-v0.1
          restore-keys: |
            ${{ matrix.os }}-thirdparty-

      - name: Setup Toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: building toolchain..."
          echo \$TOOLDIR
          TOOLDIR=$PWD/tools
          mkdir -p build
          cd build
          ../configure --tooldir=$TOOLDIR
          ci/toolchain_install.sh --all

      - name: Build Third Party
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        run: |
          make -C third_party > /dev/null

      - name: Save updated toolchain cache
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}

      - name: Save updated third_party cache
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: third_party
          key: ${{ matrix.os }}-thirdparty-v0.1

      - name: Run Build inside container
        run: |
          "$APPTAINER_BASE_CMD" \
            --bind "${{ github.workspace }}/tools:${{ github.workspace }}/tools" \
            --bind "${{ github.workspace }}/third_party:${{ github.workspace }}/third_party" \
            --env TOOLDIR="$TOOLDIR" \
            demo.sif bash <<'EOF'
            set -e
            echo "--- Inside container ---"
            echo "PWD before setting TOOLDIR: $PWD"
            TOOLDIR=$PWD/tools
            echo "TOOLDIR set to: $TOOLDIR"

            echo "outer config"
            ./configure --tooldir=$TOOLDIR --xlen=32

            mkdir -p build32
            cd build32
            echo "PWD after cd: $PWD"

            ../configure --tooldir=$TOOLDIR --xlen=32

            echo "Listing current directory:"
            ls -al ./
            echo "Listing parent directory:"
            ls -al ../
            echo "Contents of ../ci:"
            ls -al ../ci

            echo "Current TOOLDIR"
            echo $TOOLDIR

            echo "Contents of TOOLDIR"
            ls $TOOLDIR

            echo "--- Sourcing toolchain_env.sh ---"
            cat ../ci/toolchain_env.sh
            source ../ci/toolchain_env.sh

            echo "--- Starting build ---"
            make software -s
            make tests -s
          EOF

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.xlen }}
          path: build${{ matrix.xlen }}

  # tests:
  #   needs: build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, ubuntu-24.04]
  #       name: [regression, opencl, cache, config1, config2, debug, scope, stress, synthesis, vm, vector, cupbop, tensor]
  #       xlen: [32, 64]
  #   runs-on: ${{ matrix.os }}
  #
  #   env:
  #     GITHUB_WORKSPACE: ${{ github.workspace }}
  #     APPTAINER_VERSION: "1.4.3"
  #     APPTAINER_BASE_CMD: apptainer exec --bind ${{ github.workspace }}:${{ github.workspace }} --pwd ${{ github.workspace }}
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Install Apptainer
  #       uses: eWaterCycle/setup-apptainer@v2
  #       with:
  #         apptainer-version: ${{ env.APPTAINER_VERSION }}
  #
  #     - name: Download .sif image
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: apptainer-image-${{ matrix.os }}
  #         path: .
  #
  #     - name: Download Build Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-${{ matrix.os }}-${{ matrix.xlen }}
  #         path: build${{ matrix.xlen }}
  #
  #     - name: Run Tests inside container
  #       run: |
  #         $APPTAINER_BASE_CMD \
  #           --env XLEN=${{ matrix.xlen }} \
  #           demo.sif bash -c "
  #             set -e
  #             cd build\${XLEN}
  #             source ../ci/toolchain_env.sh
  #             chmod -R +x .
  #             if [ '\${{ matrix.name }}' = 'regression' ]; then
  #               ./ci/regression.sh --unittest
  #               ./ci/regression.sh --isa
  #               ./ci/regression.sh --kernel
  #               ./ci/regression.sh --regression
  #             else
  #               ./ci/regression.sh --\${{ matrix.name }}
  #             fi
  #           "

  complete:
    runs-on: ubuntu-22.04
    needs: [apptainer-build]
    steps:
      - name: Check Completion
        run: echo "✅ All matrix jobs passed successfully."
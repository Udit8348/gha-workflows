name: Apptainer CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        xlen: [32]
    runs-on: ${{ matrix.os }}

    env:
      APPTAINER_VERSION: "1.4.3"
      TOOLDIR: ${{ github.workspace }}/tools

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # cache .sif using apptainer version, vm os, .def file, and its dependencies
      - name: Check .sif Cache
        id: cache-sif
        uses: actions/cache@v4
        with:
          path: miscs/apptainer/vortex.sif
          key: vortex-sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('miscs/apptainer/vortex.def', 'miscs/apptainer/install_boost_openssl.sh', 'miscs/apptainer/*.deb') }}
          restore-keys: |
            sif-${{ matrix.os }}-

      - name: Install Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: ${{ env.APPTAINER_VERSION }}

      # def file has dependencies on files (*.deb and .sh) in its local directory so we need to pushd / popd during build
      - name: Build container (if no cache hit)
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        run: |
          rm -f miscs/apptainer/vortex.sif
          pushd miscs/apptainer
          apptainer build vortex.sif vortex.def
          popd

      - name: Save .sif image to cache
        if: ${{ steps.cache-sif.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: miscs/apptainer/vortex.sif
          key: vortex-sif-${{ matrix.os }}-${{ env.APPTAINER_VERSION }}-${{ hashFiles('miscs/apptainer/vortex.def', 'miscs/apptainer/install_boost_openssl.sh', 'miscs/apptainer/*.deb') }}

      # downstream jobs can pull from this if needed
      - name: Upload .sif as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sif-${{ matrix.os }}
          path: miscs/apptainer/vortex.sif

      - name: Access Toolchain Cache
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}
          restore-keys: |
            toolchain-${{ matrix.os }}-

      - name: Download Toolchain on Cache Miss
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss: building toolchain..."
          TOOLDIR=$PWD/tools
          mkdir -p build
          cd build
          ../configure --tooldir=$TOOLDIR
          ci/toolchain_install.sh --all

      - name: Access third_party Cache
        id: cache-thirdparty
        uses: actions/cache@v4
        with:
          path: third_party
          key: ${{ matrix.os }}-thirdparty-v0.1
          restore-keys: |
            ${{ matrix.os }}-thirdparty-

      - name: Build Third Party on Cache Miss
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        run: |
          make -C third_party > /dev/null

      - name: Save Updated toolchain Cache
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: tools
          key: toolchain-${{ matrix.os }}-${{ hashFiles('ci/toolchain_install.sh') }}

      - name: Save Updated third_party Cache
        if: steps.cache-thirdparty.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: third_party
          key: ${{ matrix.os }}-thirdparty-v0.1
      
      - name: Run Build inside container
        run: |
          apptainer exec \
            --bind ${{ github.workspace }}:${{ github.workspace }} \
            --bind ${{ github.workspace }}/tools:/tools \
            --bind ${{ github.workspace }}/third_party:${{ github.workspace }}/third_party \
            --pwd ${{ github.workspace }} \
            --env TOOLDIR=/tools \
            miscs/apptainer/vortex.sif bash <<'EOF'
              set -e
              echo "Inside Container"
              echo "Skipping outer config?"

              echo "todo parameterize this according to matrix"
              mkdir -p build${{ matrix.xlen }}
              cd build${{ matrix.xlen }}

              ../configure --tooldir=$TOOLDIR --xlen=${{ matrix.xlen }}

              echo "--- Sourcing toolchain_env.sh ---"
              source ../ci/toolchain_env.sh

              echo "--- Starting build ---"
              make software -s
              make tests -s
          EOF

  complete:
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - name: Check Completion
        run: echo "âœ… All matrix jobs passed successfully."